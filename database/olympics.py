import psycopg2
import argparse

from config import password
from config import database
from config import user

(connection, cursor) = (None, None)

def main():
	arguments = get_parsed_arguments()
	
	# Update the connection and cursor.
	(_connection, _cursor) = database_init()
	global connection
	connection = _connection
	global cursor
	cursor = _cursor

	# Do the SQL queries depending on what was passed in from the command line.
	if arguments.athletesfrom != "":
		noc = arguments.athletesfrom
		query1(noc)
	  
	if arguments.nocbymedals:
		query2()

	if arguments.events:
		query3()

# Get stuff from command line.
def get_parsed_arguments():
	parser = argparse.ArgumentParser(description='Sort/filter a CSV formatted list of books and authors')
	
	help = 'python3 olympics.py\n'
	help += '--athletesfrom (-a) takes a NOC and returns every athlete from the region (takes one argument)\n'
	help += '--nocbymedals (-n) lists the NOCs by gold medals (takes one argument to run although the argument doesnt matter)\n'
	help +=  '--events (-e) lists every olympian\n'
	help += 'to compete in a certain event (one argument)\n'
	help += '--help (h) (gives you list of commands if needed)'
	parser.add_argument('--help, -h', help = help)

	parser.add_argument('--athletesfrom', '-a', help='lists every athlete from a given NOC')
	parser.add_argument('--nocbymedals', '-n', help='lists every NOC by total gold medals (decreasing order). needs an argument to run but what argument is doesnt matter')
	parser.add_argument('--events', '-e', help='lists every athlete who has competed in the listed event')
  
	parsed_arguments = parser.parse_args()

	return parsed_arguments

def database_init():
	# Connect to the database.
	try:
		connection = psycopg2.connect(database=database, user=user, password=password)
	except Exception as e:
		print(e)
		exit()

	# Set up cursor.
	try:
		cursor = connection.cursor()
	except Exception as e:
		print(e)
		exit()

	return (connection, cursor)

# SQL command to get the names of all the athletes from a specified NOC
def get_query1(noc):
	return "SELECT DISTINCT athletes.name, athletes.team_id, teams.id from athletes, teams WHERE teams.noc = {}" \
		 " and athletes.team_id = teams.id".format(noc)

# SQL command to list all the NOCs and the number of gold medals they have won, in decreasing order of the number of gold medals.
def get_query2(noc, medal):
	return "SELECT athletes.name, teams.id FROM athletes, teams WHERE teams.noc = {}" \
		   " AND athletes.medal = '{}' AND athletes.team_id = teams.id".format(noc, medal)

# SQL command to list the names of all the athletes that competed in wrestling
query3 = "SELECT DISTINCT athletes.name, athletes.event FROM athletes WHERE event = 'Wrestling' and athletes.event = event"

def query1(noc):
	# Query the database, leaving you with a "cursor"--an object you can
	# use to iterate over the rows generated by your query.
	try:
		cursor.execute(get_query1("%s"), (noc, ))
	except Exception as e:
		print(e)
		exit()

	print(1)
	# We have a cursor now. Iterate over its rows to print the results.
	print('===== Names of all the athletes from the USA =====')
	for row in cursor:
		print(row[0], row[1])
	print()

def query2():
	# Get list of NOCs.
	try:
		cursor.execute("SELECT teams.noc FROM teams")
	except Exception as e:
		print(e)
		exit()
	noc_list = [n[0] for n in cursor]

	def get_medal_count(noc, medal):
		# Do query2.
		try:
			cursor.execute(get_query2("%s", medal), (noc, ))
		except Exception as e:
			print(e)
			exit()

		n = 0
		for i in cursor:  # dumb but works
			n += 1

		return n

	def order_nocs_by_medal_count():
		result = []
		for noc in noc_list:
			team_medals = []
			team_medals.append(noc)
			team_medals.append(get_medal_count(noc, "Gold"))
			if len(result) > 0:
				index = 0
				for medals in result:
					if medals[1] < team_medals[1]:
						result.insert(index, team_medals)
						break
					elif team_medals[1] == 0:
						result.append(team_medals)
						break
					else:
						index += 1
			else:
				result.append(team_medals)

		return result

	for (noc, count) in order_nocs_by_medal_count():
		print("Number of gold medals won by {} is {}.".format(noc, count))

def query3():
	# Now do query3.
	try:
		cursor.execute(query3)
	except Exception as e:
		print(e)
		exit()

main()